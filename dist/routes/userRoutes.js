"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userController_1 = require("../controller/userController");
const profileController_1 = require("../controller/profileController");
const cloudinaryController_1 = require("../controller/cloudinaryController");
const eventController_1 = require("../controller/eventController");
const commentController_1 = require("../controller/commentController");
const networkController_1 = require("../controller/networkController");
const ticketController_1 = require("../controller/ticketController");
const chatController_1 = require("../controller/chatController");
const notificationController_1 = require("../controller/notificationController");
const reportController_1 = require("../controller/reportController");
const userAuth_1 = require("../middleware/userAuth");
const router = express_1.default.Router();
router.post("/signup", userController_1.signup);
router.post("/verify-otp", userController_1.verifyOtp);
router.post("/resend-otp", userController_1.resendOtp);
router.post("/login", userController_1.userLogin);
router.post("/forgot-password", userController_1.forgotPassword);
router.get("/validate-reset-token/:token", userController_1.validateResetToken);
router.post("/reset-password", userController_1.resetPassword);
router.post("/oauth", userController_1.googleAuth);
router.post("/edit-profile", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), profileController_1.editProfile);
router.get("/cloud-signature", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), cloudinaryController_1.generateSignature);
router.post("/edit-dp", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), cloudinaryController_1.updateDp);
router.post("/edit-banner", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), cloudinaryController_1.updateBanner);
router.post("/create-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.addEvent);
router.get("/events", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.getEvents);
router.get("/top-hosts", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), profileController_1.getTopHosts);
router.get("/all-events", eventController_1.getAllEvents);
router.get("/event/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.getCreatedEvents);
router.post("/edit-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.editEvent);
router.get("/abort-event/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.abortEvent);
router.post("/like-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.likeEvent);
router.get("/comments/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), commentController_1.getEventComment);
router.post("/add-comment", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), commentController_1.addComment);
router.delete("/delete-comment/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), commentController_1.deleteComment);
router.post("/like-comment", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), commentController_1.likeComment);
router.get("/search/:query", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.searchUsers);
router.get("/profile/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.getUserDetails);
router.post("/follow", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.followUser);
router.post("/unfollow", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.unfollowUser);
router.get("/followers/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.getFollowers);
router.get("/following/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), networkController_1.getFollowing);
router.post("/checkout-session", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.checkoutSession);
router.post("/ticket", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.buyTicket);
router.get("/my-tickets", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.userTickets);
router.get("/event-details/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.eventDetails);
router.post("/cancel-ticket", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.cancelTicket);
router.get("/download-ticket/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.downloadTicketPDF);
router.get("/verify-qr/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), ticketController_1.verifyStatus);
router.post("/save-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.saveEvent);
router.get("/save-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.isSaved);
router.get("/saved", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), eventController_1.userSaved);
router.post("/conversation", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.addOrGetConversation);
router.get("/conversation", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.getConversation); //by conversation id
router.get("/conversation/:userId", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.getConversationUser); //by userId all conversations
router.post("/message", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.addMessage);
router.get("/message/:conversationId", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.getMessages); //all messages of a conversation
router.delete("/delete-message/:id", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), chatController_1.deleteMessage);
router.post("/withdraw", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), notificationController_1.withdraw);
router.get("/notifications", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), notificationController_1.notifications);
router.get("/clear-notifications", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), notificationController_1.clearNotifications);
router.post("/report-event", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), reportController_1.reportEvent);
router.post("/report-comment", userAuth_1.verifyToken, (0, userAuth_1.authorizeRole)("user"), reportController_1.reportComment);
exports.default = router;
